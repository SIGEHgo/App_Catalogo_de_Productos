theme(axis.text.x = element_text(angle = 45, hjust = 1, colour = "black", face = "bold"),
axis.title.x = element_text(color = "black", face = "bold"))
plotly::ggplotly(gg, tooltip = "text") |>
plotly::config(
modeBarButtonsToRemove = list("select2d", "lasso2d","hoverClosestCartesian", "hoverCompareCartesian","toggleSpikelines"),
scrollZoom = TRUE,
displaylogo = FALSE,
doubleClick = "reset",
locale = "es"
)
gg = ggplot(data = df, aes(x = variable_seleccionada, y = frecuencia)) +
geom_bar(fill = "#691c32", color = "#b38e5d",
aes(text = paste0(
"<b>Variable seleccionada:</b> ", "Input..Petición.",
"<br><b>Frecuencia:</b> ", after_stat(count))
)) +
geom_text(stat = "count",
aes(label = after_stat(count), y = after_stat(count)/2),
size = 4,
color = "white") +
labs(x = gsub("_", " ", "Input..Petición.") |>  stringr::str_replace_all("_", " ") |> stringr::str_replace_all("\\.", " ") |>
stringr::str_squish() |> stringr::str_to_lower() |> tools::toTitleCase(),
y = "Frecuencia"
) +
theme_minimal(base_size = 12) +
theme(axis.text.x = element_text(angle = 45, hjust = 1, colour = "black", face = "bold"),
axis.title.x = element_text(color = "black", face = "bold"))
plotly::ggplotly(gg, tooltip = "text") |>
plotly::config(
modeBarButtonsToRemove = list("select2d", "lasso2d","hoverClosestCartesian", "hoverCompareCartesian","toggleSpikelines"),
scrollZoom = TRUE,
displaylogo = FALSE,
doubleClick = "reset",
locale = "es"
)
gg = ggplot(data = df, aes(x = variable_seleccionada, y = frecuencia))
gg = ggplot(data = df, aes(x = variable_seleccionada, y = frecuencia)) +
geom_bar(stat = "identity")
gg
gg = ggplot(data = df, aes(x = variable_seleccionada, y = frecuencia)) +
geom_bar(stat = "identity", fill = "#691c32", color = "#b38e5d")
gg
gg = ggplot(data = df, aes(x = variable_seleccionada, y = frecuencia)) +
geom_bar(stat = "identity", fill = "#691c32", color = "#b38e5d",
aes(text = paste0(
"<b>Variable seleccionada:</b> ", "Input..Petición.",
"<br><b>Frecuencia:</b> ", after_stat(count))
)))
gg
gg = ggplot(data = df, aes(x = variable_seleccionada, y = frecuencia)) +
geom_bar(stat = "identity", fill = "#691c32", color = "#b38e5d",
aes(text = paste0(
"<b>Variable seleccionada:</b> ", "Input..Petición.",
"<br><b>Frecuencia:</b> ", after_stat(count))
))
gg
gg = ggplot(data = df, aes(x = variable_seleccionada, y = frecuencia)) +
geom_bar(stat = "identity", fill = "#691c32", color = "#b38e5d")
gg
gg = ggplot(data = df, aes(x = variable_seleccionada, y = frecuencia)) +
geom_bar(stat = "identity", fill = "#691c32", color = "#b38e5d",
aes(text = paste0(
"<b>Variable seleccionada:</b> ", "Input..Petición.",
"<br><b>Frecuencia:</b> ", after_stat(count))
))
gg
gg = ggplot(data = df, aes(x = variable_seleccionada, y = frecuencia)) +
geom_bar(stat = "identity", fill = "#691c32", color = "#b38e5d")
gg
plot_ly(
data = df,
type = "treemap",
labels = ~variable_seleccionada,
values = ~frecuencia,
parents = "",
textinfo = "none",
texttemplate = "%{label}<br> <b>Frecuencia: </b>%{value}<br><b> Porcentaje: </b> %{percentEntry:.0%}",  # Personalizado el texto
hovertemplate = "<b>%{label}</b><br>Frecuencia: %{value}<br>Porcentaje: %{percentEntry:.0%}<extra></extra>",
textposition = "middle center"
) |> plotly::config(
modeBarButtonsToRemove = list("select2d", "lasso2d", "hoverClosestCartesian", "hoverCompareCartesian", "toggleSpikelines"),
scrollZoom = TRUE,
displaylogo = FALSE,
doubleClick = "reset",
locale = "es"
)
plot_ly(
data = df,
labels = ~variable_seleccionada,
values = ~frecuencia,
type = 'pie',
textinfo = 'label+percent',
insidetextorientation = 'radial',
marker = list(line = list(color = '#FFFFFF', width = 1)),
text = ~paste0(
"<b>", variable_seleccionada, "</b>",
"<br><b>Frecuencia: </b>", frecuencia,
"<br><b>Porcentaje: </b>", round(frecuencia / sum(frecuencia) * 100, 1), "%"
),
hoverinfo = "text"
)  |>
layout(
legend = list(
orientation = "v",
x = 1,
y = 0.5
)
) |>
config(
modeBarButtonsToRemove = list("select2d", "lasso2d",
"hoverClosestCartesian", "hoverCompareCartesian",
"toggleSpikelines"),
scrollZoom = TRUE,
displaylogo = FALSE,
doubleClick = "reset",
locale = "es"
)
gg = ggplot(data = df, aes(x = variable_seleccionada, y = frecuencia)) +
geom_bar(fill = "#691c32", color = "#b38e5d")
gg
gg = ggplot(data = df, aes(x = variable_seleccionada, y = frecuencia)) +
geom_bar(stat = "identity", fill = "#691c32", color = "#b38e5d")
gg
gg = ggplot(data = df, aes(x = variable_seleccionada, y = frecuencia)) +
geom_bar(stat = "identity", fill = "#691c32", color = "#b38e5d") +
geom_text(aes(label = frecuencia, y = frecuencia/2),
position = position_dodge(width = 0.9),
size = 4,
color = "white"))
gg = ggplot(data = df, aes(x = variable_seleccionada, y = frecuencia)) +
geom_bar(stat = "identity", fill = "#691c32", color = "#b38e5d") +
geom_text(aes(label = frecuencia, y = frecuencia/2),
position = position_dodge(width = 0.9),
size = 4,
color = "white")
gg
gg = ggplot(data = df, aes(x = variable_seleccionada, y = frecuencia)) +
geom_bar(stat = "identity", fill = "#691c32", color = "#b38e5d") +
geom_text(aes(label = frecuencia, y = frecuencia/2),
position = position_dodge(width = 0.9),
size = 4,
color = "white") +
labs(x = gsub("_", " ", "xd") |> stringr::str_squish() |> tools::toTitleCase(),   # Modificar por input$variable
y = "Valor") +
theme_minimal(base_size = 12) +
theme(axis.text.x = element_text(angle = 45, hjust = 1, colour = "black", face = "bold"),
axis.title.x = element_text(color = "black", face = "bold"))
gg
datos = "https://docs.google.com/spreadsheets/d/e/2PACX-1vShNJnh442gay0BXd5hnYPUK1cC4j3JgKRvdHadU5DincbhNmCbWVmz2GlkqStUq8Ci--bGzlP5LfLg/pub?gid=0&single=true&output=csv" |> read.csv()
gg = ggplot(data = datos, aes(x = Input..Petición.)) +
geom_bar(fill = "#691c32", color = "#b38e5d",
aes(text = paste0(
"<b>Variable seleccionada:</b> ", "Input..Petición.",
"<br><b>Frecuencia:</b> ", after_stat(count))
)) +
geom_text(stat = "count",
aes(label = after_stat(count), y = after_stat(count)/2),
size = 4,
color = "white") +
labs(x = gsub("_", " ", "Input..Petición.") |>  stringr::str_replace_all("_", " ") |> stringr::str_replace_all("\\.", " ") |>
stringr::str_squish() |> stringr::str_to_lower() |> tools::toTitleCase(),
y = "Frecuencia"
) +
theme_minimal(base_size = 12) +
theme(axis.text.x = element_text(angle = 45, hjust = 1, colour = "black", face = "bold"),
axis.title.x = element_text(color = "black", face = "bold"))
datos = "https://docs.google.com/spreadsheets/d/e/2PACX-1vShNJnh442gay0BXd5hnYPUK1cC4j3JgKRvdHadU5DincbhNmCbWVmz2GlkqStUq8Ci--bGzlP5LfLg/pub?gid=0&single=true&output=csv" |> read.csv()
variable_seleccionada = "Input..Petición."
df = datos[[variable_seleccionada]] |>  as.data.frame()
names(df)[1] = "variable_seleccionada"
df = df |>
dplyr::mutate(variable_seleccionada = dplyr::if_else(condition = variable_seleccionada == "", true = "Sin dato", false = variable_seleccionada)) |>
dplyr::group_by(variable_seleccionada) |>
dplyr::summarise(frecuencia = dplyr::n()) |>
dplyr::ungroup() |>
dplyr::arrange(frecuencia)
datos = "https://docs.google.com/spreadsheets/d/e/2PACX-1vShNJnh442gay0BXd5hnYPUK1cC4j3JgKRvdHadU5DincbhNmCbWVmz2GlkqStUq8Ci--bGzlP5LfLg/pub?gid=0&single=true&output=csv" |> read.csv()
variable_seleccionada = "Input..Petición."
df = datos[[variable_seleccionada]] |>  as.data.frame()
names(df)[1] = "variable_seleccionada"
df = df |>
dplyr::mutate(variable_seleccionada = dplyr::if_else(condition = variable_seleccionada == "", true = "Sin dato", false = variable_seleccionada)) |>
dplyr::group_by(variable_seleccionada) |>
dplyr::summarise(frecuencia = dplyr::n()) |>
dplyr::ungroup() |>
dplyr::arrange(frecuencia)
gg = ggplot(data = df, aes(x = variable_seleccionada, y = frecuencia)) +
geom_bar(stat = "identity", fill = "#691c32", color = "#b38e5d") +
geom_text(aes(label = frecuencia, y = frecuencia/2),
position = position_dodge(width = 0.9),
size = 4,
color = "white") +
labs(x = gsub("_", " ", "xd") |> stringr::str_squish() |> tools::toTitleCase(),   # Modificar por input$variable
y = "Frecuencia") +
theme_minimal(base_size = 12) +
theme(axis.text.x = element_text(angle = 45, hjust = 1, colour = "black", face = "bold"),
axis.title.x = element_text(color = "black", face = "bold"))
library(shiny)
library(bslib)          # Sidebar
library(DT)             # Tabla
library(plotly)         # Grafica interactivos
library(ggplot2)        # Graficos 2d
library(treemapify)     # Grafico de treemapify
datos = "https://docs.google.com/spreadsheets/d/e/2PACX-1vShNJnh442gay0BXd5hnYPUK1cC4j3JgKRvdHadU5DincbhNmCbWVmz2GlkqStUq8Ci--bGzlP5LfLg/pub?gid=0&single=true&output=csv" |> read.csv()
variable_seleccionada = "Input..Petición."
df = datos[[variable_seleccionada]] |>  as.data.frame()
names(df)[1] = "variable_seleccionada"
df = df |>
dplyr::mutate(variable_seleccionada = dplyr::if_else(condition = variable_seleccionada == "", true = "Sin dato", false = variable_seleccionada)) |>
dplyr::group_by(variable_seleccionada) |>
dplyr::summarise(frecuencia = dplyr::n()) |>
dplyr::ungroup() |>
dplyr::arrange(frecuencia)
gg = ggplot(data = df, aes(x = variable_seleccionada, y = frecuencia)) +
geom_bar(stat = "identity", fill = "#691c32", color = "#b38e5d") +
geom_text(aes(label = frecuencia, y = frecuencia/2),
position = position_dodge(width = 0.9),
size = 4,
color = "white") +
labs(x = gsub("_", " ", "xd") |> stringr::str_squish() |> tools::toTitleCase(),   # Modificar por input$variable
y = "Frecuencia") +
theme_minimal(base_size = 12) +
theme(axis.text.x = element_text(angle = 45, hjust = 1, colour = "black", face = "bold"),
axis.title.x = element_text(color = "black", face = "bold"))
gg
gg = ggplot(data = datos, aes(x = Input..Petición.)) +
geom_bar(fill = "#691c32", color = "#b38e5d",
aes(text = paste0(
"<b>Variable seleccionada:</b> ", "Input..Petición.",
"<br><b>Frecuencia:</b> ", after_stat(count))
)) +
geom_text(stat = "count",
aes(label = after_stat(count), y = after_stat(count)/2),
size = 4,
color = "white") +
labs(x = gsub("_", " ", "Input..Petición.") |>  stringr::str_replace_all("_", " ") |> stringr::str_replace_all("\\.", " ") |>
stringr::str_squish() |> stringr::str_to_lower() |> tools::toTitleCase(),
y = "Frecuencia"
) +
theme_minimal(base_size = 12) +
theme(axis.text.x = element_text(angle = 45, hjust = 1, colour = "black", face = "bold"),
axis.title.x = element_text(color = "black", face = "bold"))
plotly::ggplotly(gg, tooltip = "text") |>
plotly::config(
modeBarButtonsToRemove = list("select2d", "lasso2d","hoverClosestCartesian", "hoverCompareCartesian","toggleSpikelines"),
scrollZoom = TRUE,
displaylogo = FALSE,
doubleClick = "reset",
locale = "es"
)
gg = ggplot(data = df, aes(x = variable_seleccionada, y = frecuencia)) +
geom_bar(stat = "identity", fill = "#691c32", color = "#b38e5d") +
geom_text(aes(label = frecuencia, y = frecuencia/2),
position = position_dodge(width = 0.9),
size = 4,
color = "white") +
labs(x = gsub("_", " ", "xd") |> stringr::str_squish() |> tools::toTitleCase(),   # Modificar por input$variable
y = "Frecuencia") +
theme_minimal(base_size = 12) +
theme(axis.text.x = element_text(angle = 45, hjust = 1, colour = "black", face = "bold"),
axis.title.x = element_text(color = "black", face = "bold"))
gg
gg = ggplot(data = df, aes(x = variable_seleccionada, y = frecuencia)) +
geom_bar(stat = "identity", fill = "#691c32", color = "#b38e5d",
aes(text = paste0(
"<b>Variable seleccionada:</b> ", "Input..Petición.",
"<br><b>Frecuencia:</b> ", frecuencia)
)) +
geom_text(aes(label = frecuencia, y = frecuencia/2),
position = position_dodge(width = 0.9),
size = 4,
color = "white") +
labs(x = gsub("_", " ", "xd") |> stringr::str_squish() |> tools::toTitleCase(),   # Modificar por input$variable
y = "Frecuencia") +
theme_minimal(base_size = 12) +
theme(axis.text.x = element_text(angle = 45, hjust = 1, colour = "black", face = "bold"),
axis.title.x = element_text(color = "black", face = "bold"))
plotly::ggplotly(gg, tooltip = "text") |>
plotly::config(
modeBarButtonsToRemove = list("select2d", "lasso2d","hoverClosestCartesian", "hoverCompareCartesian","toggleSpikelines"),
scrollZoom = TRUE,
displaylogo = FALSE,
doubleClick = "reset",
locale = "es"
)
View(df)
datos = "https://docs.google.com/spreadsheets/d/e/2PACX-1vShNJnh442gay0BXd5hnYPUK1cC4j3JgKRvdHadU5DincbhNmCbWVmz2GlkqStUq8Ci--bGzlP5LfLg/pub?gid=0&single=true&output=csv" |> read.csv()
variable_seleccionada = "Input..Petición."
df = datos[[variable_seleccionada]] |>  as.data.frame()
names(df)[1] = "variable_seleccionada"
df = df |>
dplyr::mutate(variable_seleccionada = dplyr::if_else(condition = variable_seleccionada == "", true = "Sin dato", false = variable_seleccionada)) |>
dplyr::group_by(variable_seleccionada) |>
dplyr::summarise(frecuencia = dplyr::n()) |>
dplyr::ungroup() |>
dplyr::arrange(dplyr::desc(frecuencia))
View(df)
runApp()
shiny::observeEvent(output$grafica, {
seleccion_grafica = output$grafica
cat("Se ha seleccionado la grafica: ", seleccion_grafica)
})
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
source("~/.active-rstudio-document", echo = TRUE)
runApp()
runApp()
gg = ggplot(data = datos, aes(x = Input..Petición.)) +
geom_bar(fill = "#691c32", color = "#b38e5d",
aes(text = paste0(
"<b>Variable seleccionada:</b> ", "Input..Petición.",
"<br><b>Frecuencia:</b> ", after_stat(count))
)) +
geom_text(stat = "count",
aes(label = after_stat(count), y = after_stat(count)/2),
size = 4,
color = "white") +
labs(x = gsub("_", " ", "Input..Petición.") |>  stringr::str_replace_all("_", " ") |> stringr::str_replace_all("\\.", " ") |>
stringr::str_squish() |> stringr::str_to_lower() |> tools::toTitleCase(),
y = "Frecuencia"
) +
theme_minimal(base_size = 12) +
theme(axis.text.x = element_text(angle = 45, hjust = 1, colour = "black", face = "bold"),
axis.title.x = element_text(color = "black", face = "bold"))
plotly::ggplotly(gg, tooltip = "text") |>
plotly::config(
modeBarButtonsToRemove = list("select2d", "lasso2d","hoverClosestCartesian", "hoverCompareCartesian","toggleSpikelines"),
scrollZoom = TRUE,
displaylogo = FALSE,
doubleClick = "reset",
locale = "es"
)
source("~/.active-rstudio-document", echo = TRUE)
source("~/.active-rstudio-document", echo = TRUE)
icons <- list()
icons$expand <- "M32 32C14.3 32 0 46.3 0 64v96c0 17.7 14.3 32 32 32s32-14.3 32-32V96h64c17.7 0 32-14.3 32-32s-14.3-32-32-32H32zM64 352c0-17.7-14.3-32-32-32s-32 14.3-32 32v96c0 17.7 14.3 32 32 32h96c17.7 0 32-14.3 32-32s-14.3-32-32-32H64V352zM320 32c-17.7 0-32 14.3-32 32s14.3 32 32 32h64v64c0 17.7 14.3 32 32 32s32-14.3 32-32V64c0-17.7-14.3-32-32-32H320zM448 352c0-17.7-14.3-32-32-32s-32 14.3-32 32v64H320c-17.7 0-32 14.3-32 32s14.3 32 32 32h96c17.7 0 32-14.3 32-32V352z"
dirty_js <- function(x) {
structure(x, class = unique(c("JS_EVAL", oldClass(x))))
}
button_fullscreen <- function() {
list(
name = "fullscreen",
title = "Toggle fullscreen",
icon = list(
path = icons$expand,
transform = 'matrix(1 0 0 1 0 -1) scale(0.03571429)'
),
attr = "full_screen",
val = "false",
click = dirty_js(
"function(gd, ev) {
var button = ev.currentTarget;
var astr = button.getAttribute('data-attr');
var val = button.getAttribute('data-val') || false;
if(astr === 'full_screen') {
if(val === 'false') {
button.setAttribute('data-val', 'true');
gd.classList.add('full-screen');
Plotly.Plots.resize(gd);
} else {
button.setAttribute('data-val', 'false');
gd.classList.remove('full-screen');
Plotly.Plots.resize(gd);
}
}
}"
)
)
}
runApp()
source("C:/Users/eagel/OneDrive/Escritorio/Lalo/Escuela/Gob/Extras/App_Excel/full-screen.R", echo = TRUE)
runApp()
source("C:/Users/eagel/OneDrive/Escritorio/Lalo/Escuela/Gob/Extras/App_Excel/full-screen.R", echo = TRUE)
runApp()
source("C:/Users/eagel/OneDrive/Escritorio/Lalo/Escuela/Gob/Extras/App_Excel/full-screen.R", echo = TRUE)
runApp()
runApp()
source("C:/Users/eagel/OneDrive/Escritorio/Lalo/Escuela/Gob/Extras/App_Excel/full-screen.R", echo = TRUE)
runApp()
runApp()
source("C:/Users/eagel/OneDrive/Escritorio/Lalo/Escuela/Gob/Extras/App_Excel/full-screen.R", echo = TRUE)
runApp()
runApp()
runApp()
runApp()
runApp()
source("C:/Users/eagel/OneDrive/Escritorio/Lalo/Escuela/Gob/Extras/App_Excel/full-screen.R", echo = TRUE)
source("C:/Users/eagel/OneDrive/Escritorio/Lalo/Escuela/Gob/Extras/App_Excel/full-screen.R", echo = TRUE)
runApp()
source("C:/Users/eagel/OneDrive/Escritorio/Lalo/Escuela/Gob/Extras/App_Excel/full-screen.R", echo = TRUE)
runApp()
source("C:/Users/eagel/OneDrive/Escritorio/Lalo/Escuela/Gob/Extras/App_Excel/full-screen.R", echo = TRUE)
runApp()
runApp()
shiny::runApp()
shiny::runApp()
library(rsconnect)
writeManifest()
runApp()
runApp()
runApp()
source("~/.active-rstudio-document", echo = TRUE)
source("~/.active-rstudio-document", echo = TRUE)
source("~/.active-rstudio-document", echo = TRUE)
runApp('app_uptade1.R')
runApp('app_uptade1.R')
runApp('app_uptade1.R')
runApp('app_uptade1.R')
runApp('app_uptade1.R')
runApp('app_uptade1.R')
runApp('app_uptade1.R')
runApp('app_uptade1.R')
runApp('app_uptade1.R')
runApp('app_uptade1.R')
runApp('app_uptade1.R')
runApp('app_uptade1.R')
source("~/.active-rstudio-document", echo = TRUE)
source("~/.active-rstudio-document", echo = TRUE)
source("~/.active-rstudio-document", echo = TRUE)
source("~/.active-rstudio-document", echo = TRUE)
source("~/.active-rstudio-document", echo = TRUE)
source("~/.active-rstudio-document", echo = TRUE)
source("~/.active-rstudio-document", echo = TRUE)
source("~/.active-rstudio-document", echo = TRUE)
source("~/.active-rstudio-document", echo = TRUE)
source("~/.active-rstudio-document", echo = TRUE)
source("~/.active-rstudio-document", echo = TRUE)
source("~/.active-rstudio-document", echo = TRUE)
source("~/.active-rstudio-document", echo = TRUE)
source("~/.active-rstudio-document", echo = TRUE)
source("~/.active-rstudio-document", echo = TRUE)
source("~/.active-rstudio-document", echo = TRUE)
source("~/.active-rstudio-document", echo = TRUE)
source("~/.active-rstudio-document", echo = TRUE)
source("~/.active-rstudio-document", echo = TRUE)
source("~/.active-rstudio-document", echo = TRUE)
source("~/.active-rstudio-document", echo = TRUE)
source("~/.active-rstudio-document", echo = TRUE)
runApp('app_uptade1.R')
runApp('app_uptade1.R')
runApp('app_uptade1.R')
runApp('app_uptade1.R')
runApp('app_uptade1.R')
runApp('app_uptade1.R')
runApp('app_uptade1.R')
runApp('app_uptade1.R')
runApp('app_uptade1.R')
runApp('app_uptade1.R')
runApp('app_uptade1.R')
runApp('app_uptade1.R')
runApp('app_uptade1.R')
runApp('app_uptade1.R')
runApp('app_uptade1.R')
runApp('app_uptade1.R')
runApp('app_uptade1.R')
runApp('app_uptade1.R')
runApp('app_uptade1.R')
runApp('app_uptade1.R')
runApp('app_uptade1.R')
runApp('app_uptade1.R')
runApp('app_uptade1.R')
source("~/.active-rstudio-document", echo = TRUE)
runApp('app_uptade1.R')
runApp('app_uptade1.R')
runApp('app_uptade1.R')
runApp('app_uptade1.R')
runApp('app_uptade1.R')
